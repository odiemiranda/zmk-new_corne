#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        HRL: HRL {
            compatible = "zmk,behavior-hold-tap";
            label = "HRL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
            flavor = "tap-preferred";
        };

        HRR: HRR {
            compatible = "zmk,behavior-hold-tap";
            label = "HRR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        Left_Shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <15 14>;
            layers = <0>;
        };

        Right_Shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <26 25>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC   &kp Q  &kp W  &kp E            &kp R                &kp T                                    &mmv MOVE_UP                     &kp Y      &kp U                 &kp I             &kp O    &kp P     &kp BSPC
&kp TAB   &kp A  &kp S  &HRL LEFT_ALT D  &HRL LEFT_CONTROL F  &kp G                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H      &HRR RIGHT_CONTROL J  &HRR RIGHT_ALT K  &kp L    &kp SEMI  &kp SQT
&kp CAPS  &kp Z  &kp X  &kp C            &kp V                &kp B      &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N      &kp M                 &kp COMMA         &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                        &mo 2            &mo 1                &kp ENTER                                                                 &kp SPACE  &none                 &to 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                                 &mmv MOVE_UP                     &kp CARET       &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS       &kp EQUAL  &kp GRAVE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE
&trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp UNDERSCORE  &kp PLUS   &kp TILDE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH
                                    &to 0         &none         &kp ENTER                                                                    &kp SPACE       &to 0      &to 2
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "FUNCTION";
            bindings = <
&kp F1    &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                             &mmv MOVE_UP                     &mkp LCLK         &mkp RCLK          &none         &none      &none  &kp PSCRN
&kp F7    &kp F8     &kp F9     &kp F10    &kp F11    &kp F12            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT          &kp DOWN           &kp UP_ARROW  &kp RIGHT  &none  &kp RC(PSCRN)
&kp CAPS  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &none    &trans                    &mmv MOVE_DOWN                   &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &none         &none      &none  &kp C_PP
                                &to 0      &trans     &none                                                               &none             &to 1              &to 3
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "CONTROL";
            bindings = <
&bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &none                                &mmv MOVE_UP                     &bt BT_CLR      &none  &none  &none  &none  &none
&rgb_ug RGB_TOG  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &none                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bt BT_CLR_ALL  &none  &none  &none  &none  &none
&bl BL_TOG       &bl BL_DEC       &bl BL_INC       &bl BL_CYCLE     &trans           &none  &kp C_MUTE                    &mmv MOVE_DOWN                   &none           &none  &none  &none  &none  &none
                                                   &to 0            &none            &none                                                                 &trans          &to 2  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        GAME {
            bindings = <
&trans  &trans  &kp W   &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &kp S   &kp D   &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
